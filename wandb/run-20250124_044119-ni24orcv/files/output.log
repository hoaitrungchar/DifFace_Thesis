trainer:
  target: trainer.TrainerPredictedPrior
model:
  target: models.SwinUnet.SwinUnet
  params:
    config: 1
    patch_size: 4
    num_classes: 1
    embed_dim: 96
    depths:
    - 2
    - 2
    - 2
    - 2
    depths_decoder:
    - 1
    - 2
    - 2
    - 2
    num_heads:
    - 3
    - 6
    - 12
    - 24
    window_size: 4
    qkv_bias: true
    in_chans: 3
    qk_scale: null
    drop_rate: 0.0
    drop_path_rate: 0.1
    ape: false
    patch_norm: true
    use_checkpoint: false
data:
  train:
    type: PriorTraining
    params:
      dataset_type: train
      dir_path:
      - /data/FFHQ/Dataset/FFHQ/train
      noise_path1:
      - /data/FFHQ/Dataset/CelebA-HQ/train
      noise_path2:
      - /data/FFHQ/Dataset/ImageNet/train
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_train
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path:
      - /data/FFHQ/Dataset/Mask/train
      type_prior: edgeCanny
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path:
          - /data/FFHQ/Dataset/Mask/train
  val:
    type: PriorTraining
    params:
      dataset_type: val
      dir_path:
      - /data/FFHQ/Dataset/FFHQ/val
      noise_path1:
      - /data/FFHQ/Dataset/CelebA-HQ/val
      noise_path2:
      - /data/FFHQ/Dataset/ImageNet/val
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_val_test
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path:
      - /data/FFHQ/Dataset/Mask/val
      type_prior: edgeCanny
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path:
          - /data/FFHQ/Dataset/Mask/val
train:
  lr: 0.001
  lr_min: 1.0e-06
  batch:
  - 32
  - 32
  microbatch: 32
  num_workers: 8
  prefetch_factor: 2
  iterations: 600000
  weight_decay: 0
  save_freq: 10
  val_freq: ${train.save_freq}
  log_freq:
  - 2
  - 2
  - 3
  ema_rate: 0.999
  loss_type: BCE
  tf_logging: true
  local_logging: true
project_name: Thesis_blind_image_inpainting
group_name: test
name: test
save_dir: /data/FFHQ/edge_log
resume: ''
cfg_path: /data/FFHQ/DifFace_Thesis/configs/training/predicted_edge_SwinUnet.yaml
seed: 10000

trainer:
  target: trainer.TrainerPredictedPrior
model:
  target: models.SwinUnet.SwinUnet
  params:
    config: 1
    patch_size: 4
    num_classes: 1
    embed_dim: 96
    depths:
    - 2
    - 2
    - 2
    - 2
    depths_decoder:
    - 1
    - 2
    - 2
    - 2
    num_heads:
    - 3
    - 6
    - 12
    - 24
    window_size: 4
    qkv_bias: true
    in_chans: 3
    qk_scale: null
    drop_rate: 0.0
    drop_path_rate: 0.1
    ape: false
    patch_norm: true
    use_checkpoint: false
data:
  train:
    type: PriorTraining
    params:
      dataset_type: train
      dir_path:
      - /data/FFHQ/Dataset/FFHQ/train
      noise_path1:
      - /data/FFHQ/Dataset/CelebA-HQ/train
      noise_path2:
      - /data/FFHQ/Dataset/ImageNet/train
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_train
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path:
      - /data/FFHQ/Dataset/Mask/train
      type_prior: edgeCanny
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path:
          - /data/FFHQ/Dataset/Mask/train
  val:
    type: PriorTraining
    params:
      dataset_type: val
      dir_path:
      - /data/FFHQ/Dataset/FFHQ/val
      noise_path1:
      - /data/FFHQ/Dataset/CelebA-HQ/val
      noise_path2:
      - /data/FFHQ/Dataset/ImageNet/val
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_val_test
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path:
      - /data/FFHQ/Dataset/Mask/val
      type_prior: edgeCanny
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path:
          - /data/FFHQ/Dataset/Mask/val
train:
  lr: 0.001
  lr_min: 1.0e-06
  batch:
  - 32
  - 32
  microbatch: 32
  num_workers: 8
  prefetch_factor: 2
  iterations: 600000
  weight_decay: 0
  save_freq: 10
  val_freq: ${train.save_freq}
  log_freq:
  - 2
  - 2
  - 3
  ema_rate: 0.999
  loss_type: BCE
  tf_logging: true
  local_logging: true
project_name: Thesis_blind_image_inpainting
group_name: test
name: test
save_dir: /data/FFHQ/edge_log
resume: ''
cfg_path: /data/FFHQ/DifFace_Thesis/configs/training/predicted_edge_SwinUnet.yaml
seed: 10000
/home/mmhk20/.local/lib/python3.8/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)

SwinTransformerSys expand initial----depths:[2, 2, 2, 2];depths_decoder:[1, 2, 2, 2];drop_path_rate:0.1;num_classes:1
/usr/local/anaconda3/lib/python3.8/site-packages/torch/functional.py:512: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3587.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
---final upsample expand_first---
Number of parameters: 27.15M
len_file_path_all 54999
24183
1281167
len_file_paths_noise 1305350
len_file_path_all 5000
2993
50000
len_file_paths_noise 52993
Number of images in train data set: 54999
Number of images in val data set: 5000
Train:000002/600000, Loss:4.79e-01, lr:1.00e-03, gradient:1.962885e+00
Train:000004/600000, Loss:3.11e-01, lr:1.00e-03, gradient:4.099821e-01
Train:000006/600000, Loss:2.76e-01, lr:1.00e-03, gradient:2.115042e-01
Train:000008/600000, Loss:2.85e-01, lr:1.00e-03, gradient:2.808881e-01
Train:000010/600000, Loss:2.76e-01, lr:1.00e-03, gradient:1.149792e-01
Elapsed time: 30.64s
============================================================
val:003/157, loss=0.59469277
val:006/157, loss=0.59410226
val:009/157, loss=0.59684378
val:012/157, loss=0.59437597
val:015/157, loss=0.59211820
val:018/157, loss=0.59684694
val:021/157, loss=0.59248543
val:024/157, loss=0.59557205
val:027/157, loss=0.59896767
val:030/157, loss=0.59532958
val:033/157, loss=0.59248632
val:036/157, loss=0.59584570
val:039/157, loss=0.59185445
val:042/157, loss=0.59300327
val:045/157, loss=0.58905578
val:048/157, loss=0.59479922
val:051/157, loss=0.59717560
val:054/157, loss=0.59102571
val:057/157, loss=0.59387851
val:060/157, loss=0.59774446
val:063/157, loss=0.59182149
val:066/157, loss=0.59371424
val:069/157, loss=0.59235752
val:072/157, loss=0.59424800
val:075/157, loss=0.59339041
val:078/157, loss=0.59602463
val:081/157, loss=0.59753162
val:084/157, loss=0.59580052
val:087/157, loss=0.59376574
val:090/157, loss=0.59061605
val:093/157, loss=0.59443569
val:096/157, loss=0.58910757
val:099/157, loss=0.59857911
val:102/157, loss=0.59502852
val:105/157, loss=0.59876460
val:108/157, loss=0.59123755
val:111/157, loss=0.58917075
val:114/157, loss=0.59760129
val:117/157, loss=0.59329998
val:120/157, loss=0.58874327
val:123/157, loss=0.59437662
val:126/157, loss=0.59699082
val:129/157, loss=0.59658164
val:132/157, loss=0.59284490
val:135/157, loss=0.59572238
val:138/157, loss=0.59423429
val:141/157, loss=0.59545052
val:144/157, loss=0.59430724
val:147/157, loss=0.59154588
val:150/157, loss=0.59658396
val:153/157, loss=0.59462422
val:156/157, loss=0.59606093
loss=1.78133690
[34m[1mwandb[0m: [33mWARNING[0m Saving files without folders. If you want to preserve subdirectories pass base_path to wandb.save, i.e. wandb.save("/mnt/folder/file.h5", base_path="/mnt")
Train:000012/600000, Loss:3.04e-01, lr:1.00e-03, gradient:2.039029e-01
Train:000014/600000, Loss:2.84e-01, lr:1.00e-03, gradient:1.114741e-01
Train:000016/600000, Loss:2.67e-01, lr:1.00e-03, gradient:1.612780e-01
Train:000018/600000, Loss:2.76e-01, lr:1.00e-03, gradient:7.208595e-02
Train:000020/600000, Loss:2.79e-01, lr:1.00e-03, gradient:8.676388e-02
Elapsed time: 22.77s
============================================================
val:003/157, loss=0.52224839
val:006/157, loss=0.51860040
val:009/157, loss=0.52736604
val:012/157, loss=0.52044582
val:015/157, loss=0.51795167
val:018/157, loss=0.52277106
val:021/157, loss=0.51859552
val:024/157, loss=0.52464843
val:027/157, loss=0.52838153
val:030/157, loss=0.52205747
val:033/157, loss=0.51877910
val:036/157, loss=0.52349126
val:039/157, loss=0.51752830
val:042/157, loss=0.51762283
Traceback (most recent call last):
  File "main.py", line 32, in <module>
    trainer.train()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 323, in train
    self.validation()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 1281, in validation
    for ii, data in enumerate(self.dataloaders[phase]):
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 631, in __next__
    data = self._next_data()
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 675, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/data/FFHQ/DifFace_Thesis/datapipe/datasets.py", line 334, in __getitem__
    edge_img=util_image.getpriorcanny(im_path,100,200)
  File "/data/FFHQ/DifFace_Thesis/utils/util_image.py", line 1054, in getpriorcanny
    im = cv2.imread(str(path), cv2.IMREAD_GRAYSCALE)  # BGR, uint8
KeyboardInterrupt
Traceback (most recent call last):
  File "main.py", line 32, in <module>
    trainer.train()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 323, in train
    self.validation()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 1281, in validation
    for ii, data in enumerate(self.dataloaders[phase]):
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 631, in __next__
    data = self._next_data()
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 675, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/usr/local/anaconda3/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 51, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/data/FFHQ/DifFace_Thesis/datapipe/datasets.py", line 334, in __getitem__
    edge_img=util_image.getpriorcanny(im_path,100,200)
  File "/data/FFHQ/DifFace_Thesis/utils/util_image.py", line 1054, in getpriorcanny
    im = cv2.imread(str(path), cv2.IMREAD_GRAYSCALE)  # BGR, uint8
KeyboardInterrupt
