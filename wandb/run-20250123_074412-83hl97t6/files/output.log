trainer:
  target: trainer.TrainerPredictedMask
model:
  target: models.SwinUnet.SwinUnet
  params:
    config: 1
    patch_size: 4
    num_classes: 1
    embed_dim: 96
    depths:
    - 2
    - 2
    - 2
    - 2
    depths_decoder:
    - 1
    - 2
    - 2
    - 2
    num_heads:
    - 3
    - 6
    - 12
    - 24
    window_size: 4
    qkv_bias: true
    in_chans: 3
    qk_scale: null
    drop_rate: 0.0
    drop_path_rate: 0.1
    ape: false
    patch_norm: true
    use_checkpoint: false
data:
  train:
    type: MaskTraining
    params:
      dataset_type: train
      dir_path: /data/FFHQ/Dataset/FFHQ/train
      noise_path1: /data/FFHQ/Dataset/CelebA-HQ/train
      noise_path2: /data/FFHQ/Dataset/ImageNet/train
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_train
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path: /data/FFHQ/Dataset/Mask/train
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path: /data/FFHQ/Dataset/Mask/val
  val:
    type: MaskTraining
    params:
      dataset_type: val
      dir_path: /data/FFHQ/Dataset/FFHQ/val
      noise_path1: /data/FFHQ/Dataset/CelebA-HQ/val
      noise_path2: /data/FFHQ/Dataset/ImageNet/val
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_val_test
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path: /data/FFHQ/Dataset/Mask/val
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path: /data/FFHQ/Dataset/Mask/val
train:
  lr: 0.001
  lr_min: 1.0e-06
  batch:
  - 16
  - 16
  microbatch: 16
  num_workers: 8
  prefetch_factor: 2
  iterations: 600000
  weight_decay: 0
  save_freq: 10
  val_freq: ${train.save_freq}
  log_freq:
  - 2
  - 2
  - 3
  ema_rate: 0.999
  loss_type: BCE
  tf_logging: true
  local_logging: true
project_name: Thesis_blind_image_inpainting
group_name: test
name: test
save_dir: /data/FFHQ/mask_log
resume: ''
cfg_path: /data/FFHQ/DifFace_Thesis/configs/training/predicted_mask_SwinUnet.yaml
seed: 10000

trainer:
  target: trainer.TrainerPredictedMask
model:
  target: models.SwinUnet.SwinUnet
  params:
    config: 1
    patch_size: 4
    num_classes: 1
    embed_dim: 96
    depths:
    - 2
    - 2
    - 2
    - 2
    depths_decoder:
    - 1
    - 2
    - 2
    - 2
    num_heads:
    - 3
    - 6
    - 12
    - 24
    window_size: 4
    qkv_bias: true
    in_chans: 3
    qk_scale: null
    drop_rate: 0.0
    drop_path_rate: 0.1
    ape: false
    patch_norm: true
    use_checkpoint: false
data:
  train:
    type: MaskTraining
    params:
      dataset_type: train
      dir_path: /data/FFHQ/Dataset/FFHQ/train
      noise_path1: /data/FFHQ/Dataset/CelebA-HQ/train
      noise_path2: /data/FFHQ/Dataset/ImageNet/train
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_train
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path: /data/FFHQ/Dataset/Mask/train
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path: /data/FFHQ/Dataset/Mask/val
  val:
    type: MaskTraining
    params:
      dataset_type: val
      dir_path: /data/FFHQ/Dataset/FFHQ/val
      noise_path1: /data/FFHQ/Dataset/CelebA-HQ/val
      noise_path2: /data/FFHQ/Dataset/ImageNet/val
      transform_type: default
      transform_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
      transform_noise_type: crop_norm_val_test
      transform_noise_kwargs:
        mean:
        - 0.0
        - 0.0
        - 0.0
        std:
        - 1.0
        - 1.0
        - 1.0
        img_resize: 256
        crop_size: 256
      need_path: false
      im_exts:
      - png
      - jpg
      - JPEG
      recursive: false
      kernel_gaussian_size: 3
      img_size: 256
      folder_mask_path: /data/FFHQ/Dataset/Mask/val
      mask_kwargs:
        nvidia_mask_proba: 1
        nvidia_mask_kwargs:
          folder_mask_path: /data/FFHQ/Dataset/Mask/val
train:
  lr: 0.001
  lr_min: 1.0e-06
  batch:
  - 16
  - 16
  microbatch: 16
  num_workers: 8
  prefetch_factor: 2
  iterations: 600000
  weight_decay: 0
  save_freq: 10
  val_freq: ${train.save_freq}
  log_freq:
  - 2
  - 2
  - 3
  ema_rate: 0.999
  loss_type: BCE
  tf_logging: true
  local_logging: true
project_name: Thesis_blind_image_inpainting
group_name: test
name: test
save_dir: /data/FFHQ/mask_log
resume: ''
cfg_path: /data/FFHQ/DifFace_Thesis/configs/training/predicted_mask_SwinUnet.yaml
seed: 10000
/home/mmhk20/.local/lib/python3.8/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)

SwinTransformerSys expand initial----depths:[2, 2, 2, 2];depths_decoder:[1, 2, 2, 2];drop_path_rate:0.1;num_classes:1
/usr/local/anaconda3/lib/python3.8/site-packages/torch/functional.py:512: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3587.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
---final upsample expand_first---
Number of parameters: 27.15M
len_file_path_all 54999
24183
1281167
len_file_paths_noise 1305350
len_file_path_all 5000
2993
50000
len_file_paths_noise 52993
Number of images in train data set: 54999
Number of images in val data set: 5000
Train:000002/600000, Loss:8.05e-01, lr:1.00e-03, gradient1.949128e+00
Train:000004/600000, Loss:7.19e-01, lr:1.00e-03, gradient5.467422e-01
Train:000006/600000, Loss:7.18e-01, lr:1.00e-03, gradient4.636178e-01
Train:000008/600000, Loss:6.95e-01, lr:1.00e-03, gradient4.708417e-01
Train:000010/600000, Loss:6.93e-01, lr:1.00e-03, gradient2.616600e-01
Elapsed time: 15.08s
============================================================
313 313
val:003/313, loss=0.71923292
val:006/313, loss=0.71858895
val:009/313, loss=0.71816031
val:012/313, loss=0.71766851
val:015/313, loss=0.71855021
val:018/313, loss=0.71879196
val:021/313, loss=0.71830046
val:024/313, loss=0.71941159
val:027/313, loss=0.71735762
val:030/313, loss=0.71891832
val:033/313, loss=0.71781242
val:036/313, loss=0.71755157
val:039/313, loss=0.71828850
val:042/313, loss=0.71770670
val:045/313, loss=0.71938095
val:048/313, loss=0.71825395
val:051/313, loss=0.71914895
val:054/313, loss=0.71630398
val:057/313, loss=0.71625459
val:060/313, loss=0.71737963
val:063/313, loss=0.71998302
val:066/313, loss=0.71906620
val:069/313, loss=0.72098051
val:072/313, loss=0.71808318
val:075/313, loss=0.71803617
val:078/313, loss=0.71937319
val:081/313, loss=0.71760092
val:084/313, loss=0.71744871
val:087/313, loss=0.71744957
val:090/313, loss=0.71888955
val:093/313, loss=0.71694793
val:096/313, loss=0.71818505
val:099/313, loss=0.71861660
val:102/313, loss=0.71646182
val:105/313, loss=0.72057098
val:108/313, loss=0.71982650
val:111/313, loss=0.71733352
val:114/313, loss=0.71801841
val:117/313, loss=0.72018512
val:120/313, loss=0.71891787
val:123/313, loss=0.71559117
val:126/313, loss=0.72048831
val:129/313, loss=0.71797532
val:132/313, loss=0.71948195
val:135/313, loss=0.71715484
val:138/313, loss=0.71860075
val:141/313, loss=0.71790632
val:144/313, loss=0.71681452
val:147/313, loss=0.71848317
val:150/313, loss=0.71721407
val:153/313, loss=0.71879089
val:156/313, loss=0.71950054
val:159/313, loss=0.71716656
val:162/313, loss=0.71564144
val:165/313, loss=0.71732551
val:168/313, loss=0.71640261
val:171/313, loss=0.71887982
val:174/313, loss=0.71851969
val:177/313, loss=0.71968683
val:180/313, loss=0.71919455
val:183/313, loss=0.71851774
val:186/313, loss=0.71759766
val:189/313, loss=0.71744951
val:192/313, loss=0.72007308
val:195/313, loss=0.71868926
val:198/313, loss=0.71716126
val:201/313, loss=0.71806594
val:204/313, loss=0.71676761
val:207/313, loss=0.71728720
val:210/313, loss=0.71846531
val:213/313, loss=0.71908094
val:216/313, loss=0.72057585
val:219/313, loss=0.71934062
val:222/313, loss=0.71659215
val:225/313, loss=0.71807208
val:228/313, loss=0.72004257
val:231/313, loss=0.71972754
val:234/313, loss=0.71884970
val:237/313, loss=0.71865708
val:240/313, loss=0.71926459
val:243/313, loss=0.72071721
val:246/313, loss=0.71827557
val:249/313, loss=0.71924432
val:252/313, loss=0.71710191
val:255/313, loss=0.71788162
val:258/313, loss=0.71860214
val:261/313, loss=0.71829412
val:264/313, loss=0.71571869
val:267/313, loss=0.71836555
val:270/313, loss=0.71776070
val:273/313, loss=0.71887970
val:276/313, loss=0.71949367
val:279/313, loss=0.71919622
val:282/313, loss=0.71730653
val:285/313, loss=0.71873415
val:288/313, loss=0.71896178
val:291/313, loss=0.71798503
val:294/313, loss=0.71767914
val:297/313, loss=0.71802235
val:300/313, loss=0.71832889
val:303/313, loss=0.72055274
val:306/313, loss=0.71777910
val:309/313, loss=0.71807456
val:312/313, loss=0.71805402
loss=0.71834324
Train:000012/600000, Loss:6.90e-01, lr:1.00e-03, gradient2.817408e-01
Train:000014/600000, Loss:6.88e-01, lr:1.00e-03, gradient2.177932e-01
Traceback (most recent call last):
  File "main.py", line 32, in <module>
    trainer.train()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 319, in train
    self.training_step(data)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 497, in training_step
    self.log_step_train(hq_pred, loss, micro_data, flag=last_batch)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 1106, in log_step_train
    self.logging_image(hq_pred.detach(), tag="pred", phase=phase, add_global_step=True)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 370, in logging_image
    util_image.imwrite(im_np, im_path)
  File "/data/FFHQ/DifFace_Thesis/utils/util_image.py", line 582, in imwrite
    flag = cv2.imwrite(str(path), im)
KeyboardInterrupt
Traceback (most recent call last):
  File "main.py", line 32, in <module>
    trainer.train()
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 319, in train
    self.training_step(data)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 497, in training_step
    self.log_step_train(hq_pred, loss, micro_data, flag=last_batch)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 1106, in log_step_train
    self.logging_image(hq_pred.detach(), tag="pred", phase=phase, add_global_step=True)
  File "/data/FFHQ/DifFace_Thesis/trainer.py", line 370, in logging_image
    util_image.imwrite(im_np, im_path)
  File "/data/FFHQ/DifFace_Thesis/utils/util_image.py", line 582, in imwrite
    flag = cv2.imwrite(str(path), im)
KeyboardInterrupt
